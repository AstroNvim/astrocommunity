<!DOCTYPE html>
<html
  xmlns="http://www.w3.org/1999/xhtml"
  lang="$lang$"
  xml:lang="$lang$"
  $if(dir)$
  dir="$dir$"
  $endif$
>
  <head>
    <meta charset="utf-8" />
    <meta name="generator" content="pandoc-markdown-css-theme" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=yes"
    />
    <link rel="icon" type="image/svg+xml" href="./assets/astronvim.svg" />
    <link rel="shortcut icon" href="./assets/favicon.ico" />
    <link rel="apple-touch-icon" href="./assets/apple-touch-icon.png" />
    $for(author-meta)$
    <meta name="author" content="$author-meta$" />
    $endfor$ $if(date-meta)$
    <meta name="dcterms.date" content="$date-meta$" />
    $endif$ $if(keywords)$
    <meta name="keywords" content="$for(keywords)$$keywords$$sep$, $endfor$" />
    $endif$ $if(description-meta)$
    <meta name="description" content="$description-meta$" />
    $endif$
    <title>$if(title-prefix)$$title-prefix$ – $endif$$pagetitle$</title>
    $for(css)$
    <link rel="stylesheet" href="$css$" />
    $endfor$
    <!-- preload most used fonts -->
    <link
      rel="preload"
      href="./assets/fonts/web/InterVariable.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />
    <link
      rel="preload"
      href="./assets/fonts/webfonts/JetBrainsMono-Regular.woff2"
      as="font"
      type="font/woff2"
      crossorigin="anonymous"
    />

    $if(math)$ $math$ $endif$ $for(header-includes)$ $header-includes$ $endfor$
  </head>
  <body>
    $for(include-before)$ $include-before$ $endfor$

    <header>
      <h1 class="title">$title$</h1>
      <blockquote class="metadata">
        $if(subtitle)$
        <p class="subtitle">$subtitle$</p>
        $endif$ $if(author)$
        <p class="author">
          $if(author-url)$
          <a href="$author-url$">$author$</a>
          $else$ $author$ $endif$
        </p>
        $endif$ $if(date)$
        <p class="date $if(toc)$before-toc$endif$">
          <time datetime="$date$">$date$</time>
        </p>
        $endif$
      </blockquote>
    </header>

    $if(toc)$
    <nav id="$idprefix$TOC" role="doc-toc">
      $if(return-url)$
      <a href="$return-url$"
        >$if(return-text)$$return-text$$else$← Return$endif$</a
      ><br />
      $endif$
      <strong>Contents</strong><label for="contents">⊕</label>
      <input type="checkbox" id="contents" />
      $table-of-contents$
    </nav>
    $endif$

    <main>$body$</main>

    $if(return-url)$
    <footer>
      <p class="signoff">
        <a href="$return-url$"
          >$if(return-text)$$return-text$$else$← Return$endif$</a
        >
      </p>
    </footer>
    $endif$
    <script>
      (function () {
        // Non-essential if user has JavaScript off. Just makes checkboxes look nicer.
        var selector = '.task-list > li > input[type="checkbox"]';
        var checkboxes = document.querySelectorAll(selector);
        Array.from(checkboxes).forEach((checkbox) => {
          var wasChecked = checkbox.checked;
          checkbox.disabled = false;
          checkbox.addEventListener("click", (ev) => {
            ev.target.checked = wasChecked;
          });
        });
      })();

      document.addEventListener("DOMContentLoaded", function () {
        const toc = document.querySelector('nav[role="doc-toc"]');
        const tocLinks = toc.querySelectorAll("a");
        const sections = Array.from(tocLinks).map((link) =>
          document.querySelector(link.getAttribute("href")),
        );

        // Scroll to specific entry on page load
        const hash = window.location.hash;
        if (hash) {
          const target = document.querySelector(hash);
          if (target) {
            requestAnimationFrame(() => {
              target.scrollIntoView();
              const activeLink = toc.querySelector('a[href="' + hash + '"]');
              if (activeLink) {
                activeLink.scrollIntoView({ behavior: "auto", block: "nearest" });
              }
            });
          }
        }

        // Observe each section
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                const id = entry.target.id;
                const activeLink = toc.querySelector('a[href="#' + id + '"]');
                if (activeLink) {
                  tocLinks.forEach((link) => link.classList.remove("active"));
                  activeLink.classList.add("active");
                  requestAnimationFrame(() => {
                    activeLink.scrollIntoView({ behavior: "auto", block: "nearest" });
                  });
                }
              }
            });
          },
          { rootMargin: "0px 0px -60% 0px", threshold: 0.5 },
        );

        sections.forEach((section) => {
          if (section) {
            observer.observe(section);
          }
        });
      });
    </script>
    $for(include-after)$ $include-after$ $endfor$
  </body>
</html>
